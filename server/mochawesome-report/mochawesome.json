{
  "stats": {
    "suites": 4,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-02T21:37:25.371Z",
    "end": "2025-07-02T21:37:26.044Z",
    "duration": 673,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "593a828f-5743-423f-9e0c-66920401a970",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "dfff87da-0275-436c-8e46-6d9eced83905",
          "title": "Item API Endpoints",
          "fullFile": "/Users/prestonlai/team28/server/test/item.test.js",
          "file": "/test/item.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Item API Endpoints\"",
              "fullTitle": "Item API Endpoints \"before all\" hook in \"Item API Endpoints\"",
              "timedOut": false,
              "duration": 179,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const unique = Date.now();\nconst userRes = await request(baseURL)\n\t.post('/users')\n\t.send({\n\t\tusername: 'itemuser_' + unique,\n\t\tname: 'Item User',\n\t\temail: 'itemuser_' + unique + '@example.com',\n\t\tpassword: 'password123',\n\t\tcity: 'Test City',\n\t\tcountry: 'Test Country'\n\t});\ntestUser = userRes.body;\nconst catRes = await request(baseURL)\n\t.post('/categories')\n\t.send({\n\t\tname: 'Test Category ' + unique,\n\t\tdescription: 'A test category'\n\t});\ntestCategory = catRes.body;",
              "err": {},
              "uuid": "44db5637-e45c-448f-b61f-089d8f9ae081",
              "parentUUID": "dfff87da-0275-436c-8e46-6d9eced83905",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new item",
              "fullTitle": "Item API Endpoints should create a new item",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const itemData = {\n\tname: 'Test Item',\n\tdescription: 'A test item for testing',\n\tcategory: testCategory._id,\n\towner: testUser._id,\n\tcondition: 'New'\n};\nconst res = await request(baseURL)\n\t.post('/items')\n\t.field('name', itemData.name)\n\t.field('description', itemData.description)\n\t.field('category', itemData.category)\n\t.field('owner', itemData.owner)\n\t.field('condition', itemData.condition)\n\t.attach('image', Buffer.from('fake image data'), 'test.jpg');\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body.name).to.equal(itemData.name);\nexpect(res.body.description).to.equal(itemData.description);\nexpect(res.body.condition).to.equal(itemData.condition);\nexpect(res.body).to.have.property('imagePath');\nexpect(res.body.category).to.have.property('_id');\nexpect(res.body.category._id).to.equal(testCategory._id);\ntestItemId = res.body._id;",
              "err": {},
              "uuid": "b965eb8d-5115-4af8-ba71-06dc5ad460ab",
              "parentUUID": "dfff87da-0275-436c-8e46-6d9eced83905",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b965eb8d-5115-4af8-ba71-06dc5ad460ab"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 45,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cb86d34d-1be2-44dd-af29-dada455eb600",
          "title": "Sanity Check",
          "fullFile": "/Users/prestonlai/team28/server/test/sanity.test.js",
          "file": "/test/sanity.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should pass a basic truthy test",
              "fullTitle": "Sanity Check should pass a basic truthy test",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(true).to.be.true;",
              "err": {},
              "uuid": "0a582517-aa6e-441c-96b7-741fb4be91f2",
              "parentUUID": "cb86d34d-1be2-44dd-af29-dada455eb600",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0a582517-aa6e-441c-96b7-741fb4be91f2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "90336a2d-bbab-4990-b128-4c60b1ac4450",
          "title": "Trade API Endpoints",
          "fullFile": "/Users/prestonlai/team28/server/test/trade.test.js",
          "file": "/test/trade.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Trade API Endpoints\"",
              "fullTitle": "Trade API Endpoints \"before all\" hook in \"Trade API Endpoints\"",
              "timedOut": false,
              "duration": 186,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const unique = Date.now();\nconst userRes1 = await request(baseURL)\n\t.post('/users')\n\t.send({\n\t\tusername: 'tradeuser1_' + unique,\n\t\tname: 'Trade User 1',\n\t\temail: 'tradeuser1_' + unique + '@example.com',\n\t\tpassword: 'password123',\n\t\tcity: 'Test City',\n\t\tcountry: 'Test Country'\n\t});\nuser1 = userRes1.body;\nconst userRes2 = await request(baseURL)\n\t.post('/users')\n\t.send({\n\t\tusername: 'tradeuser2_' + unique,\n\t\tname: 'Trade User 2',\n\t\temail: 'tradeuser2_' + unique + '@example.com',\n\t\tpassword: 'password123',\n\t\tcity: 'Test City',\n\t\tcountry: 'Test Country'\n\t});\nuser2 = userRes2.body;\nconst catRes = await request(baseURL)\n\t.post('/categories')\n\t.send({\n\t\tname: 'Trade Category ' + unique,\n\t\tdescription: 'A trade test category'\n\t});\nconst category = catRes.body;\nconst itemRes1 = await request(baseURL)\n\t.post('/items')\n\t.field('name', 'Trade Item 1')\n\t.field('description', 'Item for trade 1')\n\t.field('category', category._id)\n\t.field('owner', user1._id)\n\t.field('condition', 'New')\n\t.attach('image', Buffer.from('fake image data'), 'trade1.jpg');\nitem1 = itemRes1.body;\nconst itemRes2 = await request(baseURL)\n\t.post('/items')\n\t.field('name', 'Trade Item 2')\n\t.field('description', 'Item for trade 2')\n\t.field('category', category._id)\n\t.field('owner', user2._id)\n\t.field('condition', 'New')\n\t.attach('image', Buffer.from('fake image data'), 'trade2.jpg');\nitem2 = itemRes2.body;",
              "err": {},
              "uuid": "bf20c7c6-f296-4868-97dd-f0b282a324d6",
              "parentUUID": "90336a2d-bbab-4990-b128-4c60b1ac4450",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new trade",
              "fullTitle": "Trade API Endpoints should create a new trade",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/trades')\n\t.send({\n\t\tuser1: user1._id,\n\t\tuser2: user2._id,\n\t\titems1: [item1._id],\n\t\titems2: [item2._id]\n\t});\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body.user1).to.have.property('_id');\nexpect(res.body.user2).to.have.property('_id');\nexpect(res.body.items1).to.be.an('array').that.is.not.empty;\nexpect(res.body.items2).to.be.an('array').that.is.not.empty;\ntradeId = res.body._id;",
              "err": {},
              "uuid": "b37ff2d4-63e3-4b13-92f5-c889cc24610b",
              "parentUUID": "90336a2d-bbab-4990-b128-4c60b1ac4450",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get trades by user1 id",
              "fullTitle": "Trade API Endpoints should get trades by user1 id",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.get(`/trades/${user1._id}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');\nif (res.body.length > 0) {\n\texpect(res.body[0]).to.have.property('_id');\n}",
              "err": {},
              "uuid": "e1b92bbf-3adc-4e96-9706-26515bb1548c",
              "parentUUID": "90336a2d-bbab-4990-b128-4c60b1ac4450",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b37ff2d4-63e3-4b13-92f5-c889cc24610b",
            "e1b92bbf-3adc-4e96-9706-26515bb1548c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 31,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6983569e-f798-42eb-b743-21a64873a010",
          "title": "User API Endpoints",
          "fullFile": "/Users/prestonlai/team28/server/test/user.test.js",
          "file": "/test/user.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new user",
              "fullTitle": "User API Endpoints should create a new user",
              "timedOut": false,
              "duration": 68,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/users')\n\t.send(testUser);\nconsole.log('Create user response:', res.status, res.body);\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body.username).to.equal(testUser.username);\nexpect(res.body.email).to.equal(testUser.email);",
              "err": {},
              "uuid": "cddd9040-37f8-40d5-9a50-346a141a13cf",
              "parentUUID": "6983569e-f798-42eb-b743-21a64873a010",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should login the user",
              "fullTitle": "User API Endpoints should login the user",
              "timedOut": false,
              "duration": 68,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/users/login')\n\t.send({ username: testUser.username, password: testUser.password });\nconsole.log('Login user response:', res.status, res.body);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('username');",
              "err": {},
              "uuid": "b2e09ef7-381f-4ec0-a398-494a334b275f",
              "parentUUID": "6983569e-f798-42eb-b743-21a64873a010",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with missing password",
              "fullTitle": "User API Endpoints should fail with missing password",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/users/login')\n\t.send({ username: testUser.username });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "06019fbf-f022-4185-94ff-2928f31d1ae6",
              "parentUUID": "6983569e-f798-42eb-b743-21a64873a010",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with invalid username",
              "fullTitle": "User API Endpoints should fail with invalid username",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/users/login')\n\t.send({ username: 'nonexistentuser', password: 'password123' });\nexpect(res.status).to.equal(401);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "73abf089-da7a-434b-b9d6-b19ce932ea2d",
              "parentUUID": "6983569e-f798-42eb-b743-21a64873a010",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with invalid password",
              "fullTitle": "User API Endpoints should fail with invalid password",
              "timedOut": false,
              "duration": 65,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/users/login')\n\t.send({ username: testUser.username, password: 'wrongpassword' });\nexpect(res.status).to.equal(401);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "53543f01-f7ba-453c-a589-c036d118acb8",
              "parentUUID": "6983569e-f798-42eb-b743-21a64873a010",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cddd9040-37f8-40d5-9a50-346a141a13cf",
            "b2e09ef7-381f-4ec0-a398-494a334b275f",
            "06019fbf-f022-4185-94ff-2928f31d1ae6",
            "73abf089-da7a-434b-b9d6-b19ce932ea2d",
            "53543f01-f7ba-453c-a589-c036d118acb8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 210,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}