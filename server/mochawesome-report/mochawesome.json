{
  "stats": {
    "suites": 4,
    "tests": 44,
    "passes": 44,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-03T02:40:39.969Z",
    "end": "2025-07-03T02:40:41.019Z",
    "duration": 1050,
    "testsRegistered": 44,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5901ae1d-be6a-4173-976b-97a2eb66e735",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1583d28f-3a59-494a-9865-8ff799cd02e6",
          "title": "Category API Endpoints",
          "fullFile": "/Users/prestonlai/team28/server/test/category.test.js",
          "file": "/test/category.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new category",
              "fullTitle": "Category API Endpoints should create a new category",
              "timedOut": false,
              "duration": 67,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/categories')\n\t.send(testCategory);\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body).to.have.property('name', testCategory.name);",
              "err": {},
              "uuid": "7421e722-38a2-4377-975a-5746f6ffb4ee",
              "parentUUID": "1583d28f-3a59-494a-9865-8ff799cd02e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create category with missing name",
              "fullTitle": "Category API Endpoints should fail to create category with missing name",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/categories')\n\t.send({});\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error', 'Category name is required.');",
              "err": {},
              "uuid": "5bebb8e5-efbc-4a50-8e5b-230cf1ab75ec",
              "parentUUID": "1583d28f-3a59-494a-9865-8ff799cd02e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create duplicate category",
              "fullTitle": "Category API Endpoints should fail to create duplicate category",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/categories')\n\t.send(testCategory);\nexpect(res.status).to.equal(409);\nexpect(res.body).to.have.property('error', 'Category already exists.');",
              "err": {},
              "uuid": "e3fa4f7e-1251-4520-98ce-dbdad4a1f500",
              "parentUUID": "1583d28f-3a59-494a-9865-8ff799cd02e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get all categories",
              "fullTitle": "Category API Endpoints should get all categories",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.get('/categories');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');\nexpect(res.body.length).to.be.greaterThan(0);",
              "err": {},
              "uuid": "fef280b4-0905-4734-a553-563ecb713386",
              "parentUUID": "1583d28f-3a59-494a-9865-8ff799cd02e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return categories in alphabetical order",
              "fullTitle": "Category API Endpoints should return categories in alphabetical order",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const unique2 = Date.now();\nconst category1 = { name: 'ZebraCategory' + unique2 };\nconst category2 = { name: 'AlphaCategory' + unique2 };\nawait request(baseURL).post('/categories').send(category1);\nawait request(baseURL).post('/categories').send(category2);\nconst res = await request(baseURL)\n\t.get('/categories');\nexpect(res.status).to.equal(200);\nconst categoryNames = res.body.map(cat => cat.name);\nconst sortedNames = [...categoryNames].sort();\nexpect(categoryNames).to.deep.equal(sortedNames);",
              "err": {},
              "uuid": "9c8fc2f7-b7bb-4b25-9fc0-962a9b8220e1",
              "parentUUID": "1583d28f-3a59-494a-9865-8ff799cd02e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle empty categories list",
              "fullTitle": "Category API Endpoints should handle empty categories list",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.get('/categories');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');",
              "err": {},
              "uuid": "a8e98516-bec4-4110-8b69-6494c90119bb",
              "parentUUID": "1583d28f-3a59-494a-9865-8ff799cd02e6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7421e722-38a2-4377-975a-5746f6ffb4ee",
            "5bebb8e5-efbc-4a50-8e5b-230cf1ab75ec",
            "e3fa4f7e-1251-4520-98ce-dbdad4a1f500",
            "fef280b4-0905-4734-a553-563ecb713386",
            "9c8fc2f7-b7bb-4b25-9fc0-962a9b8220e1",
            "a8e98516-bec4-4110-8b69-6494c90119bb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 118,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "22a86ec4-72ab-4945-960d-3ff88ed9a778",
          "title": "Item API Endpoints",
          "fullFile": "/Users/prestonlai/team28/server/test/item.test.js",
          "file": "/test/item.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Item API Endpoints\"",
              "fullTitle": "Item API Endpoints \"before all\" hook in \"Item API Endpoints\"",
              "timedOut": false,
              "duration": 162,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const unique = Date.now();\nconst userRes = await request(baseURL)\n\t.post('/users')\n\t.send({\n\t\tusername: 'itemuser_' + unique,\n\t\tname: 'Item User',\n\t\temail: 'itemuser_' + unique + '@example.com',\n\t\tpassword: 'password123',\n\t\tcity: 'Test City',\n\t\tcountry: 'Test Country'\n\t});\ntestUser = userRes.body;\nconst userRes2 = await request(baseURL)\n\t.post('/users')\n\t.send({\n\t\tusername: 'itemuser2_' + unique,\n\t\tname: 'Item User 2',\n\t\temail: 'itemuser2_' + unique + '@example.com',\n\t\tpassword: 'password123',\n\t\tcity: 'Test City',\n\t\tcountry: 'Test Country'\n\t});\ntestUser2 = userRes2.body;\nconst catRes = await request(baseURL)\n\t.post('/categories')\n\t.send({\n\t\tname: 'Test Category ' + unique,\n\t\tdescription: 'A test category'\n\t});\ntestCategory = catRes.body;",
              "err": {},
              "uuid": "e01801e2-10ee-4d5a-aa2b-8e6a2a57659c",
              "parentUUID": "22a86ec4-72ab-4945-960d-3ff88ed9a778",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new item",
              "fullTitle": "Item API Endpoints should create a new item",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const itemData = {\n\tname: 'Test Item',\n\tdescription: 'A test item for testing',\n\tcategory: testCategory._id,\n\towner: testUser._id,\n\tcondition: 'New'\n};\nconst res = await request(baseURL)\n\t.post('/items')\n\t.field('name', itemData.name)\n\t.field('description', itemData.description)\n\t.field('category', itemData.category)\n\t.field('owner', itemData.owner)\n\t.field('condition', itemData.condition)\n\t.attach('image', Buffer.from('fake image data'), 'test.jpg');\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body.name).to.equal(itemData.name);\nexpect(res.body.description).to.equal(itemData.description);\nexpect(res.body.condition).to.equal(itemData.condition);\nexpect(res.body).to.have.property('imagePath');\nexpect(res.body.category).to.have.property('_id');\nexpect(res.body.category._id).to.equal(testCategory._id);\ntestItemId = res.body._id;",
              "err": {},
              "uuid": "9027ff0f-6b93-40d2-91a6-5062806e8a16",
              "parentUUID": "22a86ec4-72ab-4945-960d-3ff88ed9a778",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create item with missing name",
              "fullTitle": "Item API Endpoints should fail to create item with missing name",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/items')\n\t.field('description', 'A test item')\n\t.field('category', testCategory._id)\n\t.field('owner', testUser._id)\n\t.field('condition', 'New')\n\t.attach('image', Buffer.from('fake image data'), 'test.jpg');\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "b3b945b3-671c-47fd-be06-31f6fe4f01cf",
              "parentUUID": "22a86ec4-72ab-4945-960d-3ff88ed9a778",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create item with missing image",
              "fullTitle": "Item API Endpoints should fail to create item with missing image",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/items')\n\t.field('name', 'Test Item')\n\t.field('description', 'A test item')\n\t.field('category', testCategory._id)\n\t.field('owner', testUser._id)\n\t.field('condition', 'New');\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error', 'Image file is required.');",
              "err": {},
              "uuid": "53028cd3-af32-43e5-8827-2922d08c1a70",
              "parentUUID": "22a86ec4-72ab-4945-960d-3ff88ed9a778",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get all products",
              "fullTitle": "Item API Endpoints should get all products",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.get('/items');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');",
              "err": {},
              "uuid": "8d34fec2-bd02-4e22-b975-3d33452b696f",
              "parentUUID": "22a86ec4-72ab-4945-960d-3ff88ed9a778",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get products excluding user",
              "fullTitle": "Item API Endpoints should get products excluding user",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.get(`/items/${testUser._id}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');",
              "err": {},
              "uuid": "f8024358-ed4c-4665-90ac-13969713d3ce",
              "parentUUID": "22a86ec4-72ab-4945-960d-3ff88ed9a778",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to search products with missing query",
              "fullTitle": "Item API Endpoints should fail to search products with missing query",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.get(`/items/search/${testUser._id}`);\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error', 'Search query is required.');",
              "err": {},
              "uuid": "7a8b6bec-8675-48d1-a553-be1b83440ade",
              "parentUUID": "22a86ec4-72ab-4945-960d-3ff88ed9a778",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to search products with empty query",
              "fullTitle": "Item API Endpoints should fail to search products with empty query",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.get(`/items/search/${testUser._id}?query=`);\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error', 'Search query is required.');",
              "err": {},
              "uuid": "51db8e4b-4a5d-4b61-b840-8372869aa175",
              "parentUUID": "22a86ec4-72ab-4945-960d-3ff88ed9a778",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update item successfully",
              "fullTitle": "Item API Endpoints should update item successfully",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updateData = {\n\tname: 'Updated Test Item',\n\tdescription: 'Updated description',\n\tcondition: 'Used'\n};\nconst res = await request(baseURL)\n\t.patch(`/items/${testItemId}`)\n\t.field('name', updateData.name)\n\t.field('description', updateData.description)\n\t.field('condition', updateData.condition);\nexpect(res.status).to.equal(200);\nexpect(res.body.name).to.equal(updateData.name);\nexpect(res.body.description).to.equal(updateData.description);\nexpect(res.body.condition).to.equal(updateData.condition);",
              "err": {},
              "uuid": "8b461a6e-e48c-40b9-a53a-142b81b2c612",
              "parentUUID": "22a86ec4-72ab-4945-960d-3ff88ed9a778",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to update item with invalid category",
              "fullTitle": "Item API Endpoints should fail to update item with invalid category",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.patch(`/items/${testItemId}`)\n\t.field('category', '111111111111111111111111');\nexpect(res.status).to.equal(404);\nexpect(res.body).to.have.property('error', 'Category not found.');",
              "err": {},
              "uuid": "fc677a44-fddf-4e98-af08-af11dc3468c4",
              "parentUUID": "22a86ec4-72ab-4945-960d-3ff88ed9a778",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete item successfully",
              "fullTitle": "Item API Endpoints should delete item successfully",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.delete(`/items/${testItemId}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('message', 'Item deleted successfully.');",
              "err": {},
              "uuid": "04215dd1-b5af-45aa-bf91-89a5812bed15",
              "parentUUID": "22a86ec4-72ab-4945-960d-3ff88ed9a778",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to delete non-existent item",
              "fullTitle": "Item API Endpoints should fail to delete non-existent item",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.delete('/items/111111111111111111111111');\nexpect(res.status).to.equal(404);\nexpect(res.body).to.have.property('error', 'Item not found.');",
              "err": {},
              "uuid": "00782732-3b6f-40f2-8e09-2b1b5d8838a2",
              "parentUUID": "22a86ec4-72ab-4945-960d-3ff88ed9a778",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to delete item with invalid ID format",
              "fullTitle": "Item API Endpoints should fail to delete item with invalid ID format",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.delete('/items/invalidid123');\nexpect(res.status).to.equal(500);",
              "err": {},
              "uuid": "a244c335-499d-4368-a5fb-fc89fcbcb0a3",
              "parentUUID": "22a86ec4-72ab-4945-960d-3ff88ed9a778",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9027ff0f-6b93-40d2-91a6-5062806e8a16",
            "b3b945b3-671c-47fd-be06-31f6fe4f01cf",
            "53028cd3-af32-43e5-8827-2922d08c1a70",
            "8d34fec2-bd02-4e22-b975-3d33452b696f",
            "f8024358-ed4c-4665-90ac-13969713d3ce",
            "7a8b6bec-8675-48d1-a553-be1b83440ade",
            "51db8e4b-4a5d-4b61-b840-8372869aa175",
            "8b461a6e-e48c-40b9-a53a-142b81b2c612",
            "fc677a44-fddf-4e98-af08-af11dc3468c4",
            "04215dd1-b5af-45aa-bf91-89a5812bed15",
            "00782732-3b6f-40f2-8e09-2b1b5d8838a2",
            "a244c335-499d-4368-a5fb-fc89fcbcb0a3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 97,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "43cf279a-1e15-4a3c-946a-f63c9959b40d",
          "title": "Trade API Endpoints",
          "fullFile": "/Users/prestonlai/team28/server/test/trade.test.js",
          "file": "/test/trade.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Trade API Endpoints\"",
              "fullTitle": "Trade API Endpoints \"before all\" hook in \"Trade API Endpoints\"",
              "timedOut": false,
              "duration": 160,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const unique = Date.now();\nconst userRes1 = await request(baseURL)\n\t.post('/users')\n\t.send({\n\t\tusername: 'tradeuser1_' + unique,\n\t\tname: 'Trade User 1',\n\t\temail: 'tradeuser1_' + unique + '@example.com',\n\t\tpassword: 'password123',\n\t\tcity: 'Test City',\n\t\tcountry: 'Test Country'\n\t});\nuser1 = userRes1.body;\nconst userRes2 = await request(baseURL)\n\t.post('/users')\n\t.send({\n\t\tusername: 'tradeuser2_' + unique,\n\t\tname: 'Trade User 2',\n\t\temail: 'tradeuser2_' + unique + '@example.com',\n\t\tpassword: 'password123',\n\t\tcity: 'Test City',\n\t\tcountry: 'Test Country'\n\t});\nuser2 = userRes2.body;\nconst catRes = await request(baseURL)\n\t.post('/categories')\n\t.send({\n\t\tname: 'Trade Category ' + unique,\n\t\tdescription: 'A trade test category'\n\t});\nconst category = catRes.body;\nconst itemRes1 = await request(baseURL)\n\t.post('/items')\n\t.field('name', 'Trade Item 1')\n\t.field('description', 'Item for trade 1')\n\t.field('category', category._id)\n\t.field('owner', user1._id)\n\t.field('condition', 'New')\n\t.attach('image', Buffer.from('fake image data'), 'trade1.jpg');\nitem1 = itemRes1.body;\nconst itemRes2 = await request(baseURL)\n\t.post('/items')\n\t.field('name', 'Trade Item 2')\n\t.field('description', 'Item for trade 2')\n\t.field('category', category._id)\n\t.field('owner', user2._id)\n\t.field('condition', 'New')\n\t.attach('image', Buffer.from('fake image data'), 'trade2.jpg');\nitem2 = itemRes2.body;",
              "err": {},
              "uuid": "38e77ae9-f243-4115-8e13-a5e7c3395269",
              "parentUUID": "43cf279a-1e15-4a3c-946a-f63c9959b40d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new trade",
              "fullTitle": "Trade API Endpoints should create a new trade",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/trades')\n\t.send({\n\t\tuser1: user1._id,\n\t\tuser2: user2._id,\n\t\titems1: [item1._id],\n\t\titems2: [item2._id]\n\t});\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body.user1).to.have.property('_id');\nexpect(res.body.user2).to.have.property('_id');\nexpect(res.body.items1).to.be.an('array').that.is.not.empty;\nexpect(res.body.items2).to.be.an('array').that.is.not.empty;\ntradeId = res.body._id;",
              "err": {},
              "uuid": "74e83219-37ad-4354-bae1-6db270a9f789",
              "parentUUID": "43cf279a-1e15-4a3c-946a-f63c9959b40d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create trade with missing user1",
              "fullTitle": "Trade API Endpoints should fail to create trade with missing user1",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/trades')\n\t.send({\n\t\tuser2: user2._id,\n\t\titems1: [item1._id],\n\t\titems2: [item2._id]\n\t});\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "312a4b2f-f676-4d2b-a4ca-7924508b19c0",
              "parentUUID": "43cf279a-1e15-4a3c-946a-f63c9959b40d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create trade with missing user2",
              "fullTitle": "Trade API Endpoints should fail to create trade with missing user2",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/trades')\n\t.send({\n\t\tuser1: user1._id,\n\t\titems1: [item1._id],\n\t\titems2: [item2._id]\n\t});\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "cc50c507-e2a6-47b1-b30c-704ac4e23885",
              "parentUUID": "43cf279a-1e15-4a3c-946a-f63c9959b40d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create trade with missing items1",
              "fullTitle": "Trade API Endpoints should fail to create trade with missing items1",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/trades')\n\t.send({\n\t\tuser1: user1._id,\n\t\tuser2: user2._id,\n\t\titems2: [item2._id]\n\t});\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "61bd74df-90a4-480b-beea-dc368b6c40fe",
              "parentUUID": "43cf279a-1e15-4a3c-946a-f63c9959b40d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create trade with missing items2",
              "fullTitle": "Trade API Endpoints should fail to create trade with missing items2",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/trades')\n\t.send({\n\t\tuser1: user1._id,\n\t\tuser2: user2._id,\n\t\titems1: [item1._id]\n\t});\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "c8bb07dd-c67c-4301-829e-e7797f7b06f6",
              "parentUUID": "43cf279a-1e15-4a3c-946a-f63c9959b40d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create trade with empty items1 array",
              "fullTitle": "Trade API Endpoints should fail to create trade with empty items1 array",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/trades')\n\t.send({\n\t\tuser1: user1._id,\n\t\tuser2: user2._id,\n\t\titems1: [],\n\t\titems2: [item2._id]\n\t});\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "b801a1ae-b817-4e96-9a75-8f9075435c19",
              "parentUUID": "43cf279a-1e15-4a3c-946a-f63c9959b40d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create trade with empty items2 array",
              "fullTitle": "Trade API Endpoints should fail to create trade with empty items2 array",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/trades')\n\t.send({\n\t\tuser1: user1._id,\n\t\tuser2: user2._id,\n\t\titems1: [item1._id],\n\t\titems2: []\n\t});\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "1f1ed318-4e2b-4e43-b1be-7fc76bc1541d",
              "parentUUID": "43cf279a-1e15-4a3c-946a-f63c9959b40d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create trade with non-array items1",
              "fullTitle": "Trade API Endpoints should fail to create trade with non-array items1",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/trades')\n\t.send({\n\t\tuser1: user1._id,\n\t\tuser2: user2._id,\n\t\titems1: item1._id,\n\t\titems2: [item2._id]\n\t});\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "25d3aaa3-feac-4c7e-af03-17d7fb003511",
              "parentUUID": "43cf279a-1e15-4a3c-946a-f63c9959b40d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create trade with non-array items2",
              "fullTitle": "Trade API Endpoints should fail to create trade with non-array items2",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/trades')\n\t.send({\n\t\tuser1: user1._id,\n\t\tuser2: user2._id,\n\t\titems1: [item1._id],\n\t\titems2: item2._id\n\t});\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "8cc7d2bb-a22d-4058-acdd-f42c1062f7db",
              "parentUUID": "43cf279a-1e15-4a3c-946a-f63c9959b40d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get trades by user1 id",
              "fullTitle": "Trade API Endpoints should get trades by user1 id",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.get(`/trades/${user1._id}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');\nif (res.body.length > 0) {\n\texpect(res.body[0]).to.have.property('_id');\n}",
              "err": {},
              "uuid": "16698498-c869-48ff-8f02-e064503f0c1e",
              "parentUUID": "43cf279a-1e15-4a3c-946a-f63c9959b40d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to get trades with missing user id",
              "fullTitle": "Trade API Endpoints should fail to get trades with missing user id",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.get('/trades/');\nexpect(res.status).to.equal(404);",
              "err": {},
              "uuid": "423b6019-477f-4227-a283-0c734b192562",
              "parentUUID": "43cf279a-1e15-4a3c-946a-f63c9959b40d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle empty trades list for user",
              "fullTitle": "Trade API Endpoints should handle empty trades list for user",
              "timedOut": false,
              "duration": 70,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const unique = Date.now();\nconst newUserRes = await request(baseURL)\n\t.post('/users')\n\t.send({\n\t\tusername: 'newuser_' + unique,\n\t\tname: 'New User',\n\t\temail: 'newuser_' + unique + '@example.com',\n\t\tpassword: 'password123',\n\t\tcity: 'Test City',\n\t\tcountry: 'Test Country'\n\t});\nconst newUser = newUserRes.body;\nconst res = await request(baseURL)\n\t.get(`/trades/${newUser._id}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');\nexpect(res.body.length).to.equal(0);",
              "err": {},
              "uuid": "0cf960ba-43dd-4826-abc5-ab39149bf797",
              "parentUUID": "43cf279a-1e15-4a3c-946a-f63c9959b40d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to get trades with invalid user id format",
              "fullTitle": "Trade API Endpoints should fail to get trades with invalid user id format",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.get('/trades/invalidid123');\nexpect(res.status).to.equal(500);",
              "err": {},
              "uuid": "f0f9314e-bfda-4415-9350-476cdb088137",
              "parentUUID": "43cf279a-1e15-4a3c-946a-f63c9959b40d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "74e83219-37ad-4354-bae1-6db270a9f789",
            "312a4b2f-f676-4d2b-a4ca-7924508b19c0",
            "cc50c507-e2a6-47b1-b30c-704ac4e23885",
            "61bd74df-90a4-480b-beea-dc368b6c40fe",
            "c8bb07dd-c67c-4301-829e-e7797f7b06f6",
            "b801a1ae-b817-4e96-9a75-8f9075435c19",
            "1f1ed318-4e2b-4e43-b1be-7fc76bc1541d",
            "25d3aaa3-feac-4c7e-af03-17d7fb003511",
            "8cc7d2bb-a22d-4058-acdd-f42c1062f7db",
            "16698498-c869-48ff-8f02-e064503f0c1e",
            "423b6019-477f-4227-a283-0c734b192562",
            "0cf960ba-43dd-4826-abc5-ab39149bf797",
            "f0f9314e-bfda-4415-9350-476cdb088137"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 116,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d862900d-cd92-41ec-ace9-c903cc6d38e0",
          "title": "User API Endpoints",
          "fullFile": "/Users/prestonlai/team28/server/test/user.test.js",
          "file": "/test/user.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new user",
              "fullTitle": "User API Endpoints should create a new user",
              "timedOut": false,
              "duration": 66,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/users')\n\t.send(testUser);\nconsole.log('Create user response:', res.status, res.body);\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body.username).to.equal(testUser.username);\nexpect(res.body.email).to.equal(testUser.email);\ncreatedUserId = res.body._id;",
              "err": {},
              "uuid": "2447b848-a0d3-41ad-bde9-555809993322",
              "parentUUID": "d862900d-cd92-41ec-ace9-c903cc6d38e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should login the user",
              "fullTitle": "User API Endpoints should login the user",
              "timedOut": false,
              "duration": 68,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/users/login')\n\t.send({ username: testUser.username, password: testUser.password });\nconsole.log('Login user response:', res.status, res.body);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('username');",
              "err": {},
              "uuid": "ab44b9da-a939-477e-9e5e-88972859f3e9",
              "parentUUID": "d862900d-cd92-41ec-ace9-c903cc6d38e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get user by ID",
              "fullTitle": "User API Endpoints should get user by ID",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.get(`/users/${createdUserId}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('_id', createdUserId);\nexpect(res.body).to.have.property('username', testUser.username);\nexpect(res.body).to.have.property('email', testUser.email);\nexpect(res.body).to.not.have.property('password');",
              "err": {},
              "uuid": "78dfcc4f-b9f8-4ee2-aca5-5b35c2e650f9",
              "parentUUID": "d862900d-cd92-41ec-ace9-c903cc6d38e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to get user with invalid ID",
              "fullTitle": "User API Endpoints should fail to get user with invalid ID",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.get('/users/invalidid123');\nexpect(res.status).to.equal(500);",
              "err": {},
              "uuid": "1a0dab38-2587-4950-960d-ad552017edd2",
              "parentUUID": "d862900d-cd92-41ec-ace9-c903cc6d38e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to get non-existent user",
              "fullTitle": "User API Endpoints should fail to get non-existent user",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.get('/users/507f1f77bcf86cd799439011');\nexpect(res.status).to.equal(404);\nexpect(res.body).to.have.property('error', 'User not found.');",
              "err": {},
              "uuid": "66e97c73-b1c6-4b82-89f0-17fab63def05",
              "parentUUID": "d862900d-cd92-41ec-ace9-c903cc6d38e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user successfully",
              "fullTitle": "User API Endpoints should update user successfully",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updateData = {\n\tname: 'Updated Name',\n\tcity: 'Toronto',\n\ttradingRadius: 15\n};\nconst res = await request(baseURL)\n\t.put(`/users/${createdUserId}`)\n\t.send(updateData);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('name', 'Updated Name');\nexpect(res.body).to.have.property('city', 'Toronto');\nexpect(res.body).to.have.property('tradingRadius', 15);\nexpect(res.body).to.have.property('username', testUser.username);",
              "err": {},
              "uuid": "8458e330-6fdb-46a0-a610-2c1712a75f50",
              "parentUUID": "d862900d-cd92-41ec-ace9-c903cc6d38e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user email successfully",
              "fullTitle": "User API Endpoints should update user email successfully",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newEmail = 'updated' + unique + '@example.com';\nconst res = await request(baseURL)\n\t.put(`/users/${createdUserId}`)\n\t.send({ email: newEmail });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('email', newEmail);",
              "err": {},
              "uuid": "53076bf8-b630-41bc-b036-e89a02602183",
              "parentUUID": "d862900d-cd92-41ec-ace9-c903cc6d38e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to update user with duplicate username",
              "fullTitle": "User API Endpoints should fail to update user with duplicate username",
              "timedOut": false,
              "duration": 71,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const unique2 = Date.now();\nconst testUser2 = {\n\tusername: 'test2' + unique2,\n\tname: 'Test2',\n\temail: 'test2' + unique2 + '@example.com',\n\tpassword: 'password123',\n\tcity: 'vancouver',\n\tcountry: 'canada'\n};\nawait request(baseURL).post('/users').send(testUser2);\nconst res = await request(baseURL)\n\t.put(`/users/${createdUserId}`)\n\t.send({ username: testUser2.username });\nexpect(res.status).to.equal(409);\nexpect(res.body).to.have.property('error', 'Username already exists.');",
              "err": {},
              "uuid": "8589e408-0681-48f0-a4a5-c3459bd2de71",
              "parentUUID": "d862900d-cd92-41ec-ace9-c903cc6d38e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to update user with duplicate email",
              "fullTitle": "User API Endpoints should fail to update user with duplicate email",
              "timedOut": false,
              "duration": 67,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const unique3 = Date.now();\nconst testUser3 = {\n\tusername: 'test3' + unique3,\n\tname: 'Test3',\n\temail: 'test3' + unique3 + '@example.com',\n\tpassword: 'password123',\n\tcity: 'vancouver',\n\tcountry: 'canada'\n};\nawait request(baseURL).post('/users').send(testUser3);\nconst res = await request(baseURL)\n\t.put(`/users/${createdUserId}`)\n\t.send({ email: testUser3.email });\nexpect(res.status).to.equal(409);\nexpect(res.body).to.have.property('error', 'Email already exists.');",
              "err": {},
              "uuid": "4b60ea28-a5f2-447b-b1b6-1cf764877f78",
              "parentUUID": "d862900d-cd92-41ec-ace9-c903cc6d38e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to update non-existent user",
              "fullTitle": "User API Endpoints should fail to update non-existent user",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.put('/users/507f1f77bcf86cd799439011')\n\t.send({ name: 'New Name' });\nexpect(res.status).to.equal(404);\nexpect(res.body).to.have.property('error', 'User not found.');",
              "err": {},
              "uuid": "118c21a2-9867-402e-8222-7c5c4b712162",
              "parentUUID": "d862900d-cd92-41ec-ace9-c903cc6d38e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with missing password",
              "fullTitle": "User API Endpoints should fail with missing password",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/users/login')\n\t.send({ username: testUser.username });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "361f5504-3f47-4566-ae47-91675ebf1593",
              "parentUUID": "d862900d-cd92-41ec-ace9-c903cc6d38e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with invalid username",
              "fullTitle": "User API Endpoints should fail with invalid username",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/users/login')\n\t.send({ username: 'nonexistentuser', password: 'password123' });\nexpect(res.status).to.equal(401);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "af5623ca-c1a2-47e7-807d-40b2e2901c03",
              "parentUUID": "d862900d-cd92-41ec-ace9-c903cc6d38e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with invalid password",
              "fullTitle": "User API Endpoints should fail with invalid password",
              "timedOut": false,
              "duration": 63,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/users/login')\n\t.send({ username: testUser.username, password: 'wrongpassword' });\nexpect(res.status).to.equal(401);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "fa6c795f-9ef9-400e-b82d-0d0cc9354788",
              "parentUUID": "d862900d-cd92-41ec-ace9-c903cc6d38e0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2447b848-a0d3-41ad-bde9-555809993322",
            "ab44b9da-a939-477e-9e5e-88972859f3e9",
            "78dfcc4f-b9f8-4ee2-aca5-5b35c2e650f9",
            "1a0dab38-2587-4950-960d-ad552017edd2",
            "66e97c73-b1c6-4b82-89f0-17fab63def05",
            "8458e330-6fdb-46a0-a610-2c1712a75f50",
            "53076bf8-b630-41bc-b036-e89a02602183",
            "8589e408-0681-48f0-a4a5-c3459bd2de71",
            "4b60ea28-a5f2-447b-b1b6-1cf764877f78",
            "118c21a2-9867-402e-8222-7c5c4b712162",
            "361f5504-3f47-4566-ae47-91675ebf1593",
            "af5623ca-c1a2-47e7-807d-40b2e2901c03",
            "fa6c795f-9ef9-400e-b82d-0d0cc9354788"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 368,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}