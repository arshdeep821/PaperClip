{
  "stats": {
    "suites": 4,
    "tests": 44,
    "passes": 44,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-03T02:37:34.211Z",
    "end": "2025-07-03T02:37:35.330Z",
    "duration": 1119,
    "testsRegistered": 44,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5d009b3b-3a1a-43f6-a270-4f152e67e6c1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9eda20b0-514c-46cc-9244-e83522521cb4",
          "title": "Category API Endpoints",
          "fullFile": "/Users/prestonlai/team28/server/test/category.test.js",
          "file": "/test/category.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new category",
              "fullTitle": "Category API Endpoints should create a new category",
              "timedOut": false,
              "duration": 48,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/categories')\n\t.send(testCategory);\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body).to.have.property('name', testCategory.name);",
              "err": {},
              "uuid": "bc04a7d5-3b54-4943-be6c-45ee69934150",
              "parentUUID": "9eda20b0-514c-46cc-9244-e83522521cb4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create category with missing name",
              "fullTitle": "Category API Endpoints should fail to create category with missing name",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/categories')\n\t.send({});\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error', 'Category name is required.');",
              "err": {},
              "uuid": "736e32b8-7759-4942-98fd-3993b78940d8",
              "parentUUID": "9eda20b0-514c-46cc-9244-e83522521cb4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create duplicate category",
              "fullTitle": "Category API Endpoints should fail to create duplicate category",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/categories')\n\t.send(testCategory);\nexpect(res.status).to.equal(409);\nexpect(res.body).to.have.property('error', 'Category already exists.');",
              "err": {},
              "uuid": "743db0a8-09d7-44bf-be54-5b67b6085737",
              "parentUUID": "9eda20b0-514c-46cc-9244-e83522521cb4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get all categories",
              "fullTitle": "Category API Endpoints should get all categories",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.get('/categories');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');\nexpect(res.body.length).to.be.greaterThan(0);",
              "err": {},
              "uuid": "7c9bb7e8-2766-4d34-a851-0935b5e6cab1",
              "parentUUID": "9eda20b0-514c-46cc-9244-e83522521cb4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return categories in alphabetical order",
              "fullTitle": "Category API Endpoints should return categories in alphabetical order",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const unique2 = Date.now();\nconst category1 = { name: 'ZebraCategory' + unique2 };\nconst category2 = { name: 'AlphaCategory' + unique2 };\nawait request(baseURL).post('/categories').send(category1);\nawait request(baseURL).post('/categories').send(category2);\nconst res = await request(baseURL)\n\t.get('/categories');\nexpect(res.status).to.equal(200);\nconst categoryNames = res.body.map(cat => cat.name);\nconst sortedNames = [...categoryNames].sort();\nexpect(categoryNames).to.deep.equal(sortedNames);",
              "err": {},
              "uuid": "5c078de9-423b-435d-8d1c-ce52481dd5a4",
              "parentUUID": "9eda20b0-514c-46cc-9244-e83522521cb4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle empty categories list",
              "fullTitle": "Category API Endpoints should handle empty categories list",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.get('/categories');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');",
              "err": {},
              "uuid": "0d849f1a-0f80-4a13-8314-1cbc706b1793",
              "parentUUID": "9eda20b0-514c-46cc-9244-e83522521cb4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bc04a7d5-3b54-4943-be6c-45ee69934150",
            "736e32b8-7759-4942-98fd-3993b78940d8",
            "743db0a8-09d7-44bf-be54-5b67b6085737",
            "7c9bb7e8-2766-4d34-a851-0935b5e6cab1",
            "5c078de9-423b-435d-8d1c-ce52481dd5a4",
            "0d849f1a-0f80-4a13-8314-1cbc706b1793"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 107,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0eb689c4-19f2-457f-865e-180db31b1950",
          "title": "Item API Endpoints",
          "fullFile": "/Users/prestonlai/team28/server/test/item.test.js",
          "file": "/test/item.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Item API Endpoints\"",
              "fullTitle": "Item API Endpoints \"before all\" hook in \"Item API Endpoints\"",
              "timedOut": false,
              "duration": 164,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const unique = Date.now();\nconst userRes = await request(baseURL)\n\t.post('/users')\n\t.send({\n\t\tusername: 'itemuser_' + unique,\n\t\tname: 'Item User',\n\t\temail: 'itemuser_' + unique + '@example.com',\n\t\tpassword: 'password123',\n\t\tcity: 'Test City',\n\t\tcountry: 'Test Country'\n\t});\ntestUser = userRes.body;\nconst userRes2 = await request(baseURL)\n\t.post('/users')\n\t.send({\n\t\tusername: 'itemuser2_' + unique,\n\t\tname: 'Item User 2',\n\t\temail: 'itemuser2_' + unique + '@example.com',\n\t\tpassword: 'password123',\n\t\tcity: 'Test City',\n\t\tcountry: 'Test Country'\n\t});\ntestUser2 = userRes2.body;\nconst catRes = await request(baseURL)\n\t.post('/categories')\n\t.send({\n\t\tname: 'Test Category ' + unique,\n\t\tdescription: 'A test category'\n\t});\ntestCategory = catRes.body;",
              "err": {},
              "uuid": "a35a7155-c798-4008-88e4-d44824f164a8",
              "parentUUID": "0eb689c4-19f2-457f-865e-180db31b1950",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new item",
              "fullTitle": "Item API Endpoints should create a new item",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const itemData = {\n\tname: 'Test Item',\n\tdescription: 'A test item for testing',\n\tcategory: testCategory._id,\n\towner: testUser._id,\n\tcondition: 'New'\n};\nconst res = await request(baseURL)\n\t.post('/items')\n\t.field('name', itemData.name)\n\t.field('description', itemData.description)\n\t.field('category', itemData.category)\n\t.field('owner', itemData.owner)\n\t.field('condition', itemData.condition)\n\t.attach('image', Buffer.from('fake image data'), 'test.jpg');\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body.name).to.equal(itemData.name);\nexpect(res.body.description).to.equal(itemData.description);\nexpect(res.body.condition).to.equal(itemData.condition);\nexpect(res.body).to.have.property('imagePath');\nexpect(res.body.category).to.have.property('_id');\nexpect(res.body.category._id).to.equal(testCategory._id);\ntestItemId = res.body._id;",
              "err": {},
              "uuid": "139b361d-5b5a-457b-9e8d-f77d9f52719d",
              "parentUUID": "0eb689c4-19f2-457f-865e-180db31b1950",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create item with missing name",
              "fullTitle": "Item API Endpoints should fail to create item with missing name",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/items')\n\t.field('description', 'A test item')\n\t.field('category', testCategory._id)\n\t.field('owner', testUser._id)\n\t.field('condition', 'New')\n\t.attach('image', Buffer.from('fake image data'), 'test.jpg');\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "e7b86ffe-1bb5-4ecb-8e89-d018582ab0d9",
              "parentUUID": "0eb689c4-19f2-457f-865e-180db31b1950",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create item with missing image",
              "fullTitle": "Item API Endpoints should fail to create item with missing image",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/items')\n\t.field('name', 'Test Item')\n\t.field('description', 'A test item')\n\t.field('category', testCategory._id)\n\t.field('owner', testUser._id)\n\t.field('condition', 'New');\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error', 'Image file is required.');",
              "err": {},
              "uuid": "2946304d-2cca-4041-9663-399585f76108",
              "parentUUID": "0eb689c4-19f2-457f-865e-180db31b1950",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get all products",
              "fullTitle": "Item API Endpoints should get all products",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.get('/items');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');",
              "err": {},
              "uuid": "0ef0aaa5-a6ec-4dcb-9601-67fd6ac51376",
              "parentUUID": "0eb689c4-19f2-457f-865e-180db31b1950",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get products excluding user",
              "fullTitle": "Item API Endpoints should get products excluding user",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.get(`/items/${testUser._id}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');",
              "err": {},
              "uuid": "32a20f33-1d8f-452d-91f9-5fb991b1491a",
              "parentUUID": "0eb689c4-19f2-457f-865e-180db31b1950",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to search products with missing query",
              "fullTitle": "Item API Endpoints should fail to search products with missing query",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.get(`/items/search/${testUser._id}`);\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error', 'Search query is required.');",
              "err": {},
              "uuid": "8ae8474d-81ff-4200-917c-7ce517d9b174",
              "parentUUID": "0eb689c4-19f2-457f-865e-180db31b1950",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to search products with empty query",
              "fullTitle": "Item API Endpoints should fail to search products with empty query",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.get(`/items/search/${testUser._id}?query=`);\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error', 'Search query is required.');",
              "err": {},
              "uuid": "7db5da51-dca6-477e-ab3e-f305a3a1f1af",
              "parentUUID": "0eb689c4-19f2-457f-865e-180db31b1950",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update item successfully",
              "fullTitle": "Item API Endpoints should update item successfully",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updateData = {\n\tname: 'Updated Test Item',\n\tdescription: 'Updated description',\n\tcondition: 'Used'\n};\nconst res = await request(baseURL)\n\t.patch(`/items/${testItemId}`)\n\t.field('name', updateData.name)\n\t.field('description', updateData.description)\n\t.field('condition', updateData.condition);\nexpect(res.status).to.equal(200);\nexpect(res.body.name).to.equal(updateData.name);\nexpect(res.body.description).to.equal(updateData.description);\nexpect(res.body.condition).to.equal(updateData.condition);",
              "err": {},
              "uuid": "b1625c78-2b6b-4070-9a1c-6c4143baf03f",
              "parentUUID": "0eb689c4-19f2-457f-865e-180db31b1950",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to update item with invalid category",
              "fullTitle": "Item API Endpoints should fail to update item with invalid category",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.patch(`/items/${testItemId}`)\n\t.field('category', '111111111111111111111111');\nexpect(res.status).to.equal(404);\nexpect(res.body).to.have.property('error', 'Category not found.');",
              "err": {},
              "uuid": "a0e79b46-967b-4303-bd3a-9372da83d184",
              "parentUUID": "0eb689c4-19f2-457f-865e-180db31b1950",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete item successfully",
              "fullTitle": "Item API Endpoints should delete item successfully",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.delete(`/items/${testItemId}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('message', 'Item deleted successfully.');",
              "err": {},
              "uuid": "beeb45b7-15ce-4784-96e1-877b881fbccf",
              "parentUUID": "0eb689c4-19f2-457f-865e-180db31b1950",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to delete non-existent item",
              "fullTitle": "Item API Endpoints should fail to delete non-existent item",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.delete('/items/111111111111111111111111');\nexpect(res.status).to.equal(404);\nexpect(res.body).to.have.property('error', 'Item not found.');",
              "err": {},
              "uuid": "7448f16d-b525-4138-99ac-c834fc9a2f17",
              "parentUUID": "0eb689c4-19f2-457f-865e-180db31b1950",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to delete item with invalid ID format",
              "fullTitle": "Item API Endpoints should fail to delete item with invalid ID format",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.delete('/items/invalidid123');\nexpect(res.status).to.equal(500);",
              "err": {},
              "uuid": "af497e4b-f751-48e5-9c05-b52aa49bcc10",
              "parentUUID": "0eb689c4-19f2-457f-865e-180db31b1950",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "139b361d-5b5a-457b-9e8d-f77d9f52719d",
            "e7b86ffe-1bb5-4ecb-8e89-d018582ab0d9",
            "2946304d-2cca-4041-9663-399585f76108",
            "0ef0aaa5-a6ec-4dcb-9601-67fd6ac51376",
            "32a20f33-1d8f-452d-91f9-5fb991b1491a",
            "8ae8474d-81ff-4200-917c-7ce517d9b174",
            "7db5da51-dca6-477e-ab3e-f305a3a1f1af",
            "b1625c78-2b6b-4070-9a1c-6c4143baf03f",
            "a0e79b46-967b-4303-bd3a-9372da83d184",
            "beeb45b7-15ce-4784-96e1-877b881fbccf",
            "7448f16d-b525-4138-99ac-c834fc9a2f17",
            "af497e4b-f751-48e5-9c05-b52aa49bcc10"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 73,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7d76c661-4d44-4a65-ad37-a6c128a2bbd3",
          "title": "Trade API Endpoints",
          "fullFile": "/Users/prestonlai/team28/server/test/trade.test.js",
          "file": "/test/trade.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Trade API Endpoints\"",
              "fullTitle": "Trade API Endpoints \"before all\" hook in \"Trade API Endpoints\"",
              "timedOut": false,
              "duration": 164,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const unique = Date.now();\nconst userRes1 = await request(baseURL)\n\t.post('/users')\n\t.send({\n\t\tusername: 'tradeuser1_' + unique,\n\t\tname: 'Trade User 1',\n\t\temail: 'tradeuser1_' + unique + '@example.com',\n\t\tpassword: 'password123',\n\t\tcity: 'Test City',\n\t\tcountry: 'Test Country'\n\t});\nuser1 = userRes1.body;\nconst userRes2 = await request(baseURL)\n\t.post('/users')\n\t.send({\n\t\tusername: 'tradeuser2_' + unique,\n\t\tname: 'Trade User 2',\n\t\temail: 'tradeuser2_' + unique + '@example.com',\n\t\tpassword: 'password123',\n\t\tcity: 'Test City',\n\t\tcountry: 'Test Country'\n\t});\nuser2 = userRes2.body;\nconst catRes = await request(baseURL)\n\t.post('/categories')\n\t.send({\n\t\tname: 'Trade Category ' + unique,\n\t\tdescription: 'A trade test category'\n\t});\nconst category = catRes.body;\nconst itemRes1 = await request(baseURL)\n\t.post('/items')\n\t.field('name', 'Trade Item 1')\n\t.field('description', 'Item for trade 1')\n\t.field('category', category._id)\n\t.field('owner', user1._id)\n\t.field('condition', 'New')\n\t.attach('image', Buffer.from('fake image data'), 'trade1.jpg');\nitem1 = itemRes1.body;\nconst itemRes2 = await request(baseURL)\n\t.post('/items')\n\t.field('name', 'Trade Item 2')\n\t.field('description', 'Item for trade 2')\n\t.field('category', category._id)\n\t.field('owner', user2._id)\n\t.field('condition', 'New')\n\t.attach('image', Buffer.from('fake image data'), 'trade2.jpg');\nitem2 = itemRes2.body;",
              "err": {},
              "uuid": "ba4160df-da58-4941-a0e8-078076dd655d",
              "parentUUID": "7d76c661-4d44-4a65-ad37-a6c128a2bbd3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new trade",
              "fullTitle": "Trade API Endpoints should create a new trade",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/trades')\n\t.send({\n\t\tuser1: user1._id,\n\t\tuser2: user2._id,\n\t\titems1: [item1._id],\n\t\titems2: [item2._id]\n\t});\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body.user1).to.have.property('_id');\nexpect(res.body.user2).to.have.property('_id');\nexpect(res.body.items1).to.be.an('array').that.is.not.empty;\nexpect(res.body.items2).to.be.an('array').that.is.not.empty;\ntradeId = res.body._id;",
              "err": {},
              "uuid": "605be4e8-b454-4dc0-aa9b-2d7593114729",
              "parentUUID": "7d76c661-4d44-4a65-ad37-a6c128a2bbd3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create trade with missing user1",
              "fullTitle": "Trade API Endpoints should fail to create trade with missing user1",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/trades')\n\t.send({\n\t\tuser2: user2._id,\n\t\titems1: [item1._id],\n\t\titems2: [item2._id]\n\t});\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "e371a3f6-1f42-411b-ba86-0278dc92e6bd",
              "parentUUID": "7d76c661-4d44-4a65-ad37-a6c128a2bbd3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create trade with missing user2",
              "fullTitle": "Trade API Endpoints should fail to create trade with missing user2",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/trades')\n\t.send({\n\t\tuser1: user1._id,\n\t\titems1: [item1._id],\n\t\titems2: [item2._id]\n\t});\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "28ae37cd-2b24-4589-9103-29f8bee047e1",
              "parentUUID": "7d76c661-4d44-4a65-ad37-a6c128a2bbd3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create trade with missing items1",
              "fullTitle": "Trade API Endpoints should fail to create trade with missing items1",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/trades')\n\t.send({\n\t\tuser1: user1._id,\n\t\tuser2: user2._id,\n\t\titems2: [item2._id]\n\t});\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "6679fa5a-e1fd-4886-9abe-0d532886eb28",
              "parentUUID": "7d76c661-4d44-4a65-ad37-a6c128a2bbd3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create trade with missing items2",
              "fullTitle": "Trade API Endpoints should fail to create trade with missing items2",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/trades')\n\t.send({\n\t\tuser1: user1._id,\n\t\tuser2: user2._id,\n\t\titems1: [item1._id]\n\t});\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "a66f12f4-323e-4a54-9b7a-b8e0803cb3e5",
              "parentUUID": "7d76c661-4d44-4a65-ad37-a6c128a2bbd3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create trade with empty items1 array",
              "fullTitle": "Trade API Endpoints should fail to create trade with empty items1 array",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/trades')\n\t.send({\n\t\tuser1: user1._id,\n\t\tuser2: user2._id,\n\t\titems1: [],\n\t\titems2: [item2._id]\n\t});\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "9e27b281-7104-4a07-b34a-919c5d9d7290",
              "parentUUID": "7d76c661-4d44-4a65-ad37-a6c128a2bbd3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create trade with empty items2 array",
              "fullTitle": "Trade API Endpoints should fail to create trade with empty items2 array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/trades')\n\t.send({\n\t\tuser1: user1._id,\n\t\tuser2: user2._id,\n\t\titems1: [item1._id],\n\t\titems2: []\n\t});\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "33fd1da0-c1a0-459a-a636-8f5362d721f5",
              "parentUUID": "7d76c661-4d44-4a65-ad37-a6c128a2bbd3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create trade with non-array items1",
              "fullTitle": "Trade API Endpoints should fail to create trade with non-array items1",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/trades')\n\t.send({\n\t\tuser1: user1._id,\n\t\tuser2: user2._id,\n\t\titems1: item1._id,\n\t\titems2: [item2._id]\n\t});\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "65713aaa-be35-4fe9-987f-184a3df3104a",
              "parentUUID": "7d76c661-4d44-4a65-ad37-a6c128a2bbd3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create trade with non-array items2",
              "fullTitle": "Trade API Endpoints should fail to create trade with non-array items2",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/trades')\n\t.send({\n\t\tuser1: user1._id,\n\t\tuser2: user2._id,\n\t\titems1: [item1._id],\n\t\titems2: item2._id\n\t});\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "acf542ca-c558-4d6a-8fbc-bb2508e197e4",
              "parentUUID": "7d76c661-4d44-4a65-ad37-a6c128a2bbd3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get trades by user1 id",
              "fullTitle": "Trade API Endpoints should get trades by user1 id",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.get(`/trades/${user1._id}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');\nif (res.body.length > 0) {\n\texpect(res.body[0]).to.have.property('_id');\n}",
              "err": {},
              "uuid": "bffaa8cc-c748-4623-85c0-c0c41ff37d3f",
              "parentUUID": "7d76c661-4d44-4a65-ad37-a6c128a2bbd3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to get trades with missing user id",
              "fullTitle": "Trade API Endpoints should fail to get trades with missing user id",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.get('/trades/');\nexpect(res.status).to.equal(404);",
              "err": {},
              "uuid": "1558884b-aa02-434b-805c-0a8959f25062",
              "parentUUID": "7d76c661-4d44-4a65-ad37-a6c128a2bbd3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle empty trades list for user",
              "fullTitle": "Trade API Endpoints should handle empty trades list for user",
              "timedOut": false,
              "duration": 70,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const unique = Date.now();\nconst newUserRes = await request(baseURL)\n\t.post('/users')\n\t.send({\n\t\tusername: 'newuser_' + unique,\n\t\tname: 'New User',\n\t\temail: 'newuser_' + unique + '@example.com',\n\t\tpassword: 'password123',\n\t\tcity: 'Test City',\n\t\tcountry: 'Test Country'\n\t});\nconst newUser = newUserRes.body;\nconst res = await request(baseURL)\n\t.get(`/trades/${newUser._id}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');\nexpect(res.body.length).to.equal(0);",
              "err": {},
              "uuid": "4f161cac-026c-4a24-b18b-8c0dd5dc051c",
              "parentUUID": "7d76c661-4d44-4a65-ad37-a6c128a2bbd3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to get trades with invalid user id format",
              "fullTitle": "Trade API Endpoints should fail to get trades with invalid user id format",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.get('/trades/invalidid123');\nexpect(res.status).to.equal(500);",
              "err": {},
              "uuid": "831880d2-4f28-417d-9f07-b1dcbd684a46",
              "parentUUID": "7d76c661-4d44-4a65-ad37-a6c128a2bbd3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "605be4e8-b454-4dc0-aa9b-2d7593114729",
            "e371a3f6-1f42-411b-ba86-0278dc92e6bd",
            "28ae37cd-2b24-4589-9103-29f8bee047e1",
            "6679fa5a-e1fd-4886-9abe-0d532886eb28",
            "a66f12f4-323e-4a54-9b7a-b8e0803cb3e5",
            "9e27b281-7104-4a07-b34a-919c5d9d7290",
            "33fd1da0-c1a0-459a-a636-8f5362d721f5",
            "65713aaa-be35-4fe9-987f-184a3df3104a",
            "acf542ca-c558-4d6a-8fbc-bb2508e197e4",
            "bffaa8cc-c748-4623-85c0-c0c41ff37d3f",
            "1558884b-aa02-434b-805c-0a8959f25062",
            "4f161cac-026c-4a24-b18b-8c0dd5dc051c",
            "831880d2-4f28-417d-9f07-b1dcbd684a46"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 109,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0c266cb7-2f6b-4d88-899c-08fb86704389",
          "title": "User API Endpoints",
          "fullFile": "/Users/prestonlai/team28/server/test/user.test.js",
          "file": "/test/user.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new user",
              "fullTitle": "User API Endpoints should create a new user",
              "timedOut": false,
              "duration": 139,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/users')\n\t.send(testUser);\nconsole.log('Create user response:', res.status, res.body);\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body.username).to.equal(testUser.username);\nexpect(res.body.email).to.equal(testUser.email);\ncreatedUserId = res.body._id;",
              "err": {},
              "uuid": "614d9ca5-bb31-4b51-99d5-bc600bca899a",
              "parentUUID": "0c266cb7-2f6b-4d88-899c-08fb86704389",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should login the user",
              "fullTitle": "User API Endpoints should login the user",
              "timedOut": false,
              "duration": 65,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/users/login')\n\t.send({ username: testUser.username, password: testUser.password });\nconsole.log('Login user response:', res.status, res.body);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('username');",
              "err": {},
              "uuid": "55fee26b-d777-49ee-9f8f-3638af9b0386",
              "parentUUID": "0c266cb7-2f6b-4d88-899c-08fb86704389",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get user by ID",
              "fullTitle": "User API Endpoints should get user by ID",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.get(`/users/${createdUserId}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('_id', createdUserId);\nexpect(res.body).to.have.property('username', testUser.username);\nexpect(res.body).to.have.property('email', testUser.email);\nexpect(res.body).to.not.have.property('password');",
              "err": {},
              "uuid": "86f1ab04-92d0-43ec-8166-37e1b451da6a",
              "parentUUID": "0c266cb7-2f6b-4d88-899c-08fb86704389",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to get user with invalid ID",
              "fullTitle": "User API Endpoints should fail to get user with invalid ID",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.get('/users/invalidid123');\nexpect(res.status).to.equal(500);",
              "err": {},
              "uuid": "e4e0c575-4d0c-4481-ae68-7290ea08ca8c",
              "parentUUID": "0c266cb7-2f6b-4d88-899c-08fb86704389",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to get non-existent user",
              "fullTitle": "User API Endpoints should fail to get non-existent user",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.get('/users/507f1f77bcf86cd799439011');\nexpect(res.status).to.equal(404);\nexpect(res.body).to.have.property('error', 'User not found.');",
              "err": {},
              "uuid": "1accb86e-3c4c-4971-8441-b2e8b62e5f43",
              "parentUUID": "0c266cb7-2f6b-4d88-899c-08fb86704389",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user successfully",
              "fullTitle": "User API Endpoints should update user successfully",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updateData = {\n\tname: 'Updated Name',\n\tcity: 'Toronto',\n\ttradingRadius: 15\n};\nconst res = await request(baseURL)\n\t.put(`/users/${createdUserId}`)\n\t.send(updateData);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('name', 'Updated Name');\nexpect(res.body).to.have.property('city', 'Toronto');\nexpect(res.body).to.have.property('tradingRadius', 15);\nexpect(res.body).to.have.property('username', testUser.username);",
              "err": {},
              "uuid": "afb4b889-9e45-4491-9b44-7a1cc9d22ea6",
              "parentUUID": "0c266cb7-2f6b-4d88-899c-08fb86704389",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user email successfully",
              "fullTitle": "User API Endpoints should update user email successfully",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newEmail = 'updated' + unique + '@example.com';\nconst res = await request(baseURL)\n\t.put(`/users/${createdUserId}`)\n\t.send({ email: newEmail });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('email', newEmail);",
              "err": {},
              "uuid": "7fd6428e-5950-48d4-9b60-bb46a6239298",
              "parentUUID": "0c266cb7-2f6b-4d88-899c-08fb86704389",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to update user with duplicate username",
              "fullTitle": "User API Endpoints should fail to update user with duplicate username",
              "timedOut": false,
              "duration": 71,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const unique2 = Date.now();\nconst testUser2 = {\n\tusername: 'test2' + unique2,\n\tname: 'Test2',\n\temail: 'test2' + unique2 + '@example.com',\n\tpassword: 'password123',\n\tcity: 'vancouver',\n\tcountry: 'canada'\n};\nawait request(baseURL).post('/users').send(testUser2);\nconst res = await request(baseURL)\n\t.put(`/users/${createdUserId}`)\n\t.send({ username: testUser2.username });\nexpect(res.status).to.equal(409);\nexpect(res.body).to.have.property('error', 'Username already exists.');",
              "err": {},
              "uuid": "33034d0d-f59d-4dea-8a95-9195e87711a6",
              "parentUUID": "0c266cb7-2f6b-4d88-899c-08fb86704389",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to update user with duplicate email",
              "fullTitle": "User API Endpoints should fail to update user with duplicate email",
              "timedOut": false,
              "duration": 89,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const unique3 = Date.now();\nconst testUser3 = {\n\tusername: 'test3' + unique3,\n\tname: 'Test3',\n\temail: 'test3' + unique3 + '@example.com',\n\tpassword: 'password123',\n\tcity: 'vancouver',\n\tcountry: 'canada'\n};\nawait request(baseURL).post('/users').send(testUser3);\nconst res = await request(baseURL)\n\t.put(`/users/${createdUserId}`)\n\t.send({ email: testUser3.email });\nexpect(res.status).to.equal(409);\nexpect(res.body).to.have.property('error', 'Email already exists.');",
              "err": {},
              "uuid": "10e21235-3c4d-429e-8516-3458d3ed7111",
              "parentUUID": "0c266cb7-2f6b-4d88-899c-08fb86704389",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to update non-existent user",
              "fullTitle": "User API Endpoints should fail to update non-existent user",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.put('/users/507f1f77bcf86cd799439011')\n\t.send({ name: 'New Name' });\nexpect(res.status).to.equal(404);\nexpect(res.body).to.have.property('error', 'User not found.');",
              "err": {},
              "uuid": "868537c3-78a9-4510-b281-9cef6e18acb3",
              "parentUUID": "0c266cb7-2f6b-4d88-899c-08fb86704389",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with missing password",
              "fullTitle": "User API Endpoints should fail with missing password",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/users/login')\n\t.send({ username: testUser.username });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "f501e3dd-298b-4786-ac97-610cdccc50de",
              "parentUUID": "0c266cb7-2f6b-4d88-899c-08fb86704389",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with invalid username",
              "fullTitle": "User API Endpoints should fail with invalid username",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/users/login')\n\t.send({ username: 'nonexistentuser', password: 'password123' });\nexpect(res.status).to.equal(401);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "d1b17fa9-64f6-48a6-a61c-3ac663f491d5",
              "parentUUID": "0c266cb7-2f6b-4d88-899c-08fb86704389",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with invalid password",
              "fullTitle": "User API Endpoints should fail with invalid password",
              "timedOut": false,
              "duration": 64,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/users/login')\n\t.send({ username: testUser.username, password: 'wrongpassword' });\nexpect(res.status).to.equal(401);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "1957f811-c4bd-4a40-9b31-f1f62d72ab41",
              "parentUUID": "0c266cb7-2f6b-4d88-899c-08fb86704389",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "614d9ca5-bb31-4b51-99d5-bc600bca899a",
            "55fee26b-d777-49ee-9f8f-3638af9b0386",
            "86f1ab04-92d0-43ec-8166-37e1b451da6a",
            "e4e0c575-4d0c-4481-ae68-7290ea08ca8c",
            "1accb86e-3c4c-4971-8441-b2e8b62e5f43",
            "afb4b889-9e45-4491-9b44-7a1cc9d22ea6",
            "7fd6428e-5950-48d4-9b60-bb46a6239298",
            "33034d0d-f59d-4dea-8a95-9195e87711a6",
            "10e21235-3c4d-429e-8516-3458d3ed7111",
            "868537c3-78a9-4510-b281-9cef6e18acb3",
            "f501e3dd-298b-4786-ac97-610cdccc50de",
            "d1b17fa9-64f6-48a6-a61c-3ac663f491d5",
            "1957f811-c4bd-4a40-9b31-f1f62d72ab41"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 461,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}