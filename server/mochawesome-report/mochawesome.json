{
  "stats": {
    "suites": 5,
    "tests": 34,
    "passes": 34,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-03T01:22:16.776Z",
    "end": "2025-07-03T01:22:17.698Z",
    "duration": 922,
    "testsRegistered": 34,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "bc59c0d1-4549-4eb3-b029-9c8f00f706c0",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a444d140-1808-47d3-8833-ca49512ccb46",
          "title": "Category API Endpoints",
          "fullFile": "/Users/prestonlai/team28/server/test/category.test.js",
          "file": "/test/category.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new category",
              "fullTitle": "Category API Endpoints should create a new category",
              "timedOut": false,
              "duration": 59,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/categories')\n\t.send(testCategory);\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body).to.have.property('name', testCategory.name);",
              "err": {},
              "uuid": "c1c8891f-71d8-4c42-a102-ca1ae5e6bcaf",
              "parentUUID": "a444d140-1808-47d3-8833-ca49512ccb46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create category with missing name",
              "fullTitle": "Category API Endpoints should fail to create category with missing name",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/categories')\n\t.send({});\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error', 'Category name is required.');",
              "err": {},
              "uuid": "d2f0a165-62dc-48e3-af14-462dfa36b529",
              "parentUUID": "a444d140-1808-47d3-8833-ca49512ccb46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create duplicate category",
              "fullTitle": "Category API Endpoints should fail to create duplicate category",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/categories')\n\t.send(testCategory);\nexpect(res.status).to.equal(409);\nexpect(res.body).to.have.property('error', 'Category already exists.');",
              "err": {},
              "uuid": "9ae7138c-ef3e-487a-8ff2-a3a48fd7f6ec",
              "parentUUID": "a444d140-1808-47d3-8833-ca49512ccb46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get all categories",
              "fullTitle": "Category API Endpoints should get all categories",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.get('/categories');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');\nexpect(res.body.length).to.be.greaterThan(0);",
              "err": {},
              "uuid": "0d77c1a6-a7cb-4f38-80f2-2dfa973f1099",
              "parentUUID": "a444d140-1808-47d3-8833-ca49512ccb46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return categories in alphabetical order",
              "fullTitle": "Category API Endpoints should return categories in alphabetical order",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const unique2 = Date.now();\nconst category1 = { name: 'ZebraCategory' + unique2 };\nconst category2 = { name: 'AlphaCategory' + unique2 };\nawait request(baseURL).post('/categories').send(category1);\nawait request(baseURL).post('/categories').send(category2);\nconst res = await request(baseURL)\n\t.get('/categories');\nexpect(res.status).to.equal(200);\nconst categoryNames = res.body.map(cat => cat.name);\nconst sortedNames = [...categoryNames].sort();\nexpect(categoryNames).to.deep.equal(sortedNames);",
              "err": {},
              "uuid": "96f72a7c-4845-4779-94f4-08ffd101b851",
              "parentUUID": "a444d140-1808-47d3-8833-ca49512ccb46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle empty categories list",
              "fullTitle": "Category API Endpoints should handle empty categories list",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.get('/categories');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');",
              "err": {},
              "uuid": "02fa6b7e-460a-4308-ab6e-d8d5321832ba",
              "parentUUID": "a444d140-1808-47d3-8833-ca49512ccb46",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c1c8891f-71d8-4c42-a102-ca1ae5e6bcaf",
            "d2f0a165-62dc-48e3-af14-462dfa36b529",
            "9ae7138c-ef3e-487a-8ff2-a3a48fd7f6ec",
            "0d77c1a6-a7cb-4f38-80f2-2dfa973f1099",
            "96f72a7c-4845-4779-94f4-08ffd101b851",
            "02fa6b7e-460a-4308-ab6e-d8d5321832ba"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 111,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2fa7a00c-b9a1-45d9-a6a2-2f1e079eb62b",
          "title": "Item API Endpoints",
          "fullFile": "/Users/prestonlai/team28/server/test/item.test.js",
          "file": "/test/item.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Item API Endpoints\"",
              "fullTitle": "Item API Endpoints \"before all\" hook in \"Item API Endpoints\"",
              "timedOut": false,
              "duration": 96,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const unique = Date.now();\nconst userRes = await request(baseURL)\n\t.post('/users')\n\t.send({\n\t\tusername: 'itemuser_' + unique,\n\t\tname: 'Item User',\n\t\temail: 'itemuser_' + unique + '@example.com',\n\t\tpassword: 'password123',\n\t\tcity: 'Test City',\n\t\tcountry: 'Test Country'\n\t});\ntestUser = userRes.body;\nconst catRes = await request(baseURL)\n\t.post('/categories')\n\t.send({\n\t\tname: 'Test Category ' + unique,\n\t\tdescription: 'A test category'\n\t});\ntestCategory = catRes.body;",
              "err": {},
              "uuid": "904b03b0-b169-4305-a8a3-8b08010055d8",
              "parentUUID": "2fa7a00c-b9a1-45d9-a6a2-2f1e079eb62b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new item",
              "fullTitle": "Item API Endpoints should create a new item",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const itemData = {\n\tname: 'Test Item',\n\tdescription: 'A test item for testing',\n\tcategory: testCategory._id,\n\towner: testUser._id,\n\tcondition: 'New'\n};\nconst res = await request(baseURL)\n\t.post('/items')\n\t.field('name', itemData.name)\n\t.field('description', itemData.description)\n\t.field('category', itemData.category)\n\t.field('owner', itemData.owner)\n\t.field('condition', itemData.condition)\n\t.attach('image', Buffer.from('fake image data'), 'test.jpg');\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body.name).to.equal(itemData.name);\nexpect(res.body.description).to.equal(itemData.description);\nexpect(res.body.condition).to.equal(itemData.condition);\nexpect(res.body).to.have.property('imagePath');\nexpect(res.body.category).to.have.property('_id');\nexpect(res.body.category._id).to.equal(testCategory._id);\ntestItemId = res.body._id;",
              "err": {},
              "uuid": "bfe20228-abd9-4522-98ba-01a2d198e91a",
              "parentUUID": "2fa7a00c-b9a1-45d9-a6a2-2f1e079eb62b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bfe20228-abd9-4522-98ba-01a2d198e91a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "002821ca-284e-457a-b104-919af369460c",
          "title": "Sanity Check",
          "fullFile": "/Users/prestonlai/team28/server/test/sanity.test.js",
          "file": "/test/sanity.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should pass a basic truthy test",
              "fullTitle": "Sanity Check should pass a basic truthy test",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(true).to.be.true;",
              "err": {},
              "uuid": "4a456efb-855f-4214-a364-b5849ad71bec",
              "parentUUID": "002821ca-284e-457a-b104-919af369460c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4a456efb-855f-4214-a364-b5849ad71bec"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4d4fc5a8-53a6-4b6d-9b0f-e3af288ee6cb",
          "title": "Trade API Endpoints",
          "fullFile": "/Users/prestonlai/team28/server/test/trade.test.js",
          "file": "/test/trade.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Trade API Endpoints\"",
              "fullTitle": "Trade API Endpoints \"before all\" hook in \"Trade API Endpoints\"",
              "timedOut": false,
              "duration": 163,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const unique = Date.now();\nconst userRes1 = await request(baseURL)\n\t.post('/users')\n\t.send({\n\t\tusername: 'tradeuser1_' + unique,\n\t\tname: 'Trade User 1',\n\t\temail: 'tradeuser1_' + unique + '@example.com',\n\t\tpassword: 'password123',\n\t\tcity: 'Test City',\n\t\tcountry: 'Test Country'\n\t});\nuser1 = userRes1.body;\nconst userRes2 = await request(baseURL)\n\t.post('/users')\n\t.send({\n\t\tusername: 'tradeuser2_' + unique,\n\t\tname: 'Trade User 2',\n\t\temail: 'tradeuser2_' + unique + '@example.com',\n\t\tpassword: 'password123',\n\t\tcity: 'Test City',\n\t\tcountry: 'Test Country'\n\t});\nuser2 = userRes2.body;\nconst catRes = await request(baseURL)\n\t.post('/categories')\n\t.send({\n\t\tname: 'Trade Category ' + unique,\n\t\tdescription: 'A trade test category'\n\t});\nconst category = catRes.body;\nconst itemRes1 = await request(baseURL)\n\t.post('/items')\n\t.field('name', 'Trade Item 1')\n\t.field('description', 'Item for trade 1')\n\t.field('category', category._id)\n\t.field('owner', user1._id)\n\t.field('condition', 'New')\n\t.attach('image', Buffer.from('fake image data'), 'trade1.jpg');\nitem1 = itemRes1.body;\nconst itemRes2 = await request(baseURL)\n\t.post('/items')\n\t.field('name', 'Trade Item 2')\n\t.field('description', 'Item for trade 2')\n\t.field('category', category._id)\n\t.field('owner', user2._id)\n\t.field('condition', 'New')\n\t.attach('image', Buffer.from('fake image data'), 'trade2.jpg');\nitem2 = itemRes2.body;",
              "err": {},
              "uuid": "5b76df6a-8cac-477e-88e1-920986fb86da",
              "parentUUID": "4d4fc5a8-53a6-4b6d-9b0f-e3af288ee6cb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new trade",
              "fullTitle": "Trade API Endpoints should create a new trade",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/trades')\n\t.send({\n\t\tuser1: user1._id,\n\t\tuser2: user2._id,\n\t\titems1: [item1._id],\n\t\titems2: [item2._id]\n\t});\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body.user1).to.have.property('_id');\nexpect(res.body.user2).to.have.property('_id');\nexpect(res.body.items1).to.be.an('array').that.is.not.empty;\nexpect(res.body.items2).to.be.an('array').that.is.not.empty;\ntradeId = res.body._id;",
              "err": {},
              "uuid": "cc0be902-6eb8-4e45-9341-e89356a6fce3",
              "parentUUID": "4d4fc5a8-53a6-4b6d-9b0f-e3af288ee6cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create trade with missing user1",
              "fullTitle": "Trade API Endpoints should fail to create trade with missing user1",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/trades')\n\t.send({\n\t\tuser2: user2._id,\n\t\titems1: [item1._id],\n\t\titems2: [item2._id]\n\t});\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "476afbfa-3e1f-463a-b715-27e31425ec95",
              "parentUUID": "4d4fc5a8-53a6-4b6d-9b0f-e3af288ee6cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create trade with missing user2",
              "fullTitle": "Trade API Endpoints should fail to create trade with missing user2",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/trades')\n\t.send({\n\t\tuser1: user1._id,\n\t\titems1: [item1._id],\n\t\titems2: [item2._id]\n\t});\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "838f693f-b30c-4e8a-88f4-fb0009ad5911",
              "parentUUID": "4d4fc5a8-53a6-4b6d-9b0f-e3af288ee6cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create trade with missing items1",
              "fullTitle": "Trade API Endpoints should fail to create trade with missing items1",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/trades')\n\t.send({\n\t\tuser1: user1._id,\n\t\tuser2: user2._id,\n\t\titems2: [item2._id]\n\t});\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "f2f6e859-747f-4cb8-a2d3-7365cb6fceef",
              "parentUUID": "4d4fc5a8-53a6-4b6d-9b0f-e3af288ee6cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create trade with missing items2",
              "fullTitle": "Trade API Endpoints should fail to create trade with missing items2",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/trades')\n\t.send({\n\t\tuser1: user1._id,\n\t\tuser2: user2._id,\n\t\titems1: [item1._id]\n\t});\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "b9c0f59f-3921-45db-a3c5-c393a57fcac1",
              "parentUUID": "4d4fc5a8-53a6-4b6d-9b0f-e3af288ee6cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create trade with empty items1 array",
              "fullTitle": "Trade API Endpoints should fail to create trade with empty items1 array",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/trades')\n\t.send({\n\t\tuser1: user1._id,\n\t\tuser2: user2._id,\n\t\titems1: [],\n\t\titems2: [item2._id]\n\t});\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "693eca65-a761-4a90-82bf-27c52a60f89c",
              "parentUUID": "4d4fc5a8-53a6-4b6d-9b0f-e3af288ee6cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create trade with empty items2 array",
              "fullTitle": "Trade API Endpoints should fail to create trade with empty items2 array",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/trades')\n\t.send({\n\t\tuser1: user1._id,\n\t\tuser2: user2._id,\n\t\titems1: [item1._id],\n\t\titems2: []\n\t});\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "193d4c3a-5930-4b3a-8b0a-9aa3a8e58e26",
              "parentUUID": "4d4fc5a8-53a6-4b6d-9b0f-e3af288ee6cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create trade with non-array items1",
              "fullTitle": "Trade API Endpoints should fail to create trade with non-array items1",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/trades')\n\t.send({\n\t\tuser1: user1._id,\n\t\tuser2: user2._id,\n\t\titems1: item1._id,\n\t\titems2: [item2._id]\n\t});\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "370d508a-a262-409b-a692-7b2982e48e2f",
              "parentUUID": "4d4fc5a8-53a6-4b6d-9b0f-e3af288ee6cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create trade with non-array items2",
              "fullTitle": "Trade API Endpoints should fail to create trade with non-array items2",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/trades')\n\t.send({\n\t\tuser1: user1._id,\n\t\tuser2: user2._id,\n\t\titems1: [item1._id],\n\t\titems2: item2._id\n\t});\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "4be4db3b-55c8-40ac-836f-505b0ac39709",
              "parentUUID": "4d4fc5a8-53a6-4b6d-9b0f-e3af288ee6cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get trades by user1 id",
              "fullTitle": "Trade API Endpoints should get trades by user1 id",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.get(`/trades/${user1._id}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');\nif (res.body.length > 0) {\n\texpect(res.body[0]).to.have.property('_id');\n}",
              "err": {},
              "uuid": "229950bf-32ee-498e-a942-28eaf83893d1",
              "parentUUID": "4d4fc5a8-53a6-4b6d-9b0f-e3af288ee6cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to get trades with missing user id",
              "fullTitle": "Trade API Endpoints should fail to get trades with missing user id",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.get('/trades/');\nexpect(res.status).to.equal(404);",
              "err": {},
              "uuid": "5c69efae-a34a-4999-b2f0-65853dcd9736",
              "parentUUID": "4d4fc5a8-53a6-4b6d-9b0f-e3af288ee6cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle empty trades list for user",
              "fullTitle": "Trade API Endpoints should handle empty trades list for user",
              "timedOut": false,
              "duration": 71,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const unique = Date.now();\nconst newUserRes = await request(baseURL)\n\t.post('/users')\n\t.send({\n\t\tusername: 'newuser_' + unique,\n\t\tname: 'New User',\n\t\temail: 'newuser_' + unique + '@example.com',\n\t\tpassword: 'password123',\n\t\tcity: 'Test City',\n\t\tcountry: 'Test Country'\n\t});\nconst newUser = newUserRes.body;\nconst res = await request(baseURL)\n\t.get(`/trades/${newUser._id}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');\nexpect(res.body.length).to.equal(0);",
              "err": {},
              "uuid": "3c698793-7580-4d56-9a14-7db4dd78edde",
              "parentUUID": "4d4fc5a8-53a6-4b6d-9b0f-e3af288ee6cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to get trades with invalid user id format",
              "fullTitle": "Trade API Endpoints should fail to get trades with invalid user id format",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.get('/trades/invalidid123');\nexpect(res.status).to.equal(500);",
              "err": {},
              "uuid": "51ccdf4e-09de-4d0b-bf56-d984242cabb8",
              "parentUUID": "4d4fc5a8-53a6-4b6d-9b0f-e3af288ee6cb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cc0be902-6eb8-4e45-9341-e89356a6fce3",
            "476afbfa-3e1f-463a-b715-27e31425ec95",
            "838f693f-b30c-4e8a-88f4-fb0009ad5911",
            "f2f6e859-747f-4cb8-a2d3-7365cb6fceef",
            "b9c0f59f-3921-45db-a3c5-c393a57fcac1",
            "693eca65-a761-4a90-82bf-27c52a60f89c",
            "193d4c3a-5930-4b3a-8b0a-9aa3a8e58e26",
            "370d508a-a262-409b-a692-7b2982e48e2f",
            "4be4db3b-55c8-40ac-836f-505b0ac39709",
            "229950bf-32ee-498e-a942-28eaf83893d1",
            "5c69efae-a34a-4999-b2f0-65853dcd9736",
            "3c698793-7580-4d56-9a14-7db4dd78edde",
            "51ccdf4e-09de-4d0b-bf56-d984242cabb8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 131,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "93bc5d5b-096e-4870-b10a-085f88263d46",
          "title": "User API Endpoints",
          "fullFile": "/Users/prestonlai/team28/server/test/user.test.js",
          "file": "/test/user.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new user",
              "fullTitle": "User API Endpoints should create a new user",
              "timedOut": false,
              "duration": 66,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/users')\n\t.send(testUser);\nconsole.log('Create user response:', res.status, res.body);\nexpect(res.status).to.equal(201);\nexpect(res.body).to.have.property('_id');\nexpect(res.body.username).to.equal(testUser.username);\nexpect(res.body.email).to.equal(testUser.email);\ncreatedUserId = res.body._id;",
              "err": {},
              "uuid": "cf0bf7f1-cb24-4fe2-a278-63ca6f022149",
              "parentUUID": "93bc5d5b-096e-4870-b10a-085f88263d46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should login the user",
              "fullTitle": "User API Endpoints should login the user",
              "timedOut": false,
              "duration": 65,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/users/login')\n\t.send({ username: testUser.username, password: testUser.password });\nconsole.log('Login user response:', res.status, res.body);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('username');",
              "err": {},
              "uuid": "6b4698d2-9913-4fce-a26a-964bb8e123f0",
              "parentUUID": "93bc5d5b-096e-4870-b10a-085f88263d46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get user by ID",
              "fullTitle": "User API Endpoints should get user by ID",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.get(`/users/${createdUserId}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('_id', createdUserId);\nexpect(res.body).to.have.property('username', testUser.username);\nexpect(res.body).to.have.property('email', testUser.email);\nexpect(res.body).to.not.have.property('password');",
              "err": {},
              "uuid": "e043b7c2-eba2-43fd-ba7f-898f7e5d1fd7",
              "parentUUID": "93bc5d5b-096e-4870-b10a-085f88263d46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to get user with invalid ID",
              "fullTitle": "User API Endpoints should fail to get user with invalid ID",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.get('/users/invalidid123');\nexpect(res.status).to.equal(500);",
              "err": {},
              "uuid": "5a6e166f-8dd8-4bf0-9278-afcae33e64a7",
              "parentUUID": "93bc5d5b-096e-4870-b10a-085f88263d46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to get non-existent user",
              "fullTitle": "User API Endpoints should fail to get non-existent user",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.get('/users/507f1f77bcf86cd799439011');\nexpect(res.status).to.equal(404);\nexpect(res.body).to.have.property('error', 'User not found.');",
              "err": {},
              "uuid": "0d110158-4602-4612-ba33-4d135f31f548",
              "parentUUID": "93bc5d5b-096e-4870-b10a-085f88263d46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user successfully",
              "fullTitle": "User API Endpoints should update user successfully",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updateData = {\n\tname: 'Updated Name',\n\tcity: 'Toronto',\n\ttradingRadius: 15\n};\nconst res = await request(baseURL)\n\t.put(`/users/${createdUserId}`)\n\t.send(updateData);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('name', 'Updated Name');\nexpect(res.body).to.have.property('city', 'Toronto');\nexpect(res.body).to.have.property('tradingRadius', 15);\nexpect(res.body).to.have.property('username', testUser.username);",
              "err": {},
              "uuid": "261b8a8e-ef46-43eb-ae98-9a6fd6dd5aa4",
              "parentUUID": "93bc5d5b-096e-4870-b10a-085f88263d46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user email successfully",
              "fullTitle": "User API Endpoints should update user email successfully",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newEmail = 'updated' + unique + '@example.com';\nconst res = await request(baseURL)\n\t.put(`/users/${createdUserId}`)\n\t.send({ email: newEmail });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('email', newEmail);",
              "err": {},
              "uuid": "5bf1d6f4-f8ad-41e7-a106-ae67d3f86d45",
              "parentUUID": "93bc5d5b-096e-4870-b10a-085f88263d46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to update user with duplicate username",
              "fullTitle": "User API Endpoints should fail to update user with duplicate username",
              "timedOut": false,
              "duration": 70,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const unique2 = Date.now();\nconst testUser2 = {\n\tusername: 'test2' + unique2,\n\tname: 'Test2',\n\temail: 'test2' + unique2 + '@example.com',\n\tpassword: 'password123',\n\tcity: 'vancouver',\n\tcountry: 'canada'\n};\nawait request(baseURL).post('/users').send(testUser2);\nconst res = await request(baseURL)\n\t.put(`/users/${createdUserId}`)\n\t.send({ username: testUser2.username });\nexpect(res.status).to.equal(409);\nexpect(res.body).to.have.property('error', 'Username already exists.');",
              "err": {},
              "uuid": "a7485457-81ab-42e6-8888-73e99140fce8",
              "parentUUID": "93bc5d5b-096e-4870-b10a-085f88263d46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to update user with duplicate email",
              "fullTitle": "User API Endpoints should fail to update user with duplicate email",
              "timedOut": false,
              "duration": 70,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const unique3 = Date.now();\nconst testUser3 = {\n\tusername: 'test3' + unique3,\n\tname: 'Test3',\n\temail: 'test3' + unique3 + '@example.com',\n\tpassword: 'password123',\n\tcity: 'vancouver',\n\tcountry: 'canada'\n};\nawait request(baseURL).post('/users').send(testUser3);\nconst res = await request(baseURL)\n\t.put(`/users/${createdUserId}`)\n\t.send({ email: testUser3.email });\nexpect(res.status).to.equal(409);\nexpect(res.body).to.have.property('error', 'Email already exists.');",
              "err": {},
              "uuid": "21e62c1e-7dec-464f-9553-4879f83e926f",
              "parentUUID": "93bc5d5b-096e-4870-b10a-085f88263d46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to update non-existent user",
              "fullTitle": "User API Endpoints should fail to update non-existent user",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.put('/users/507f1f77bcf86cd799439011')\n\t.send({ name: 'New Name' });\nexpect(res.status).to.equal(404);\nexpect(res.body).to.have.property('error', 'User not found.');",
              "err": {},
              "uuid": "7e683872-3f37-4e2b-9067-8b0166cc947a",
              "parentUUID": "93bc5d5b-096e-4870-b10a-085f88263d46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with missing password",
              "fullTitle": "User API Endpoints should fail with missing password",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/users/login')\n\t.send({ username: testUser.username });\nexpect(res.status).to.equal(400);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "94632498-2864-4c56-b7cb-8b4c4e703076",
              "parentUUID": "93bc5d5b-096e-4870-b10a-085f88263d46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with invalid username",
              "fullTitle": "User API Endpoints should fail with invalid username",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/users/login')\n\t.send({ username: 'nonexistentuser', password: 'password123' });\nexpect(res.status).to.equal(401);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "eae6ff53-c09d-48ca-9e80-a90a6c486744",
              "parentUUID": "93bc5d5b-096e-4870-b10a-085f88263d46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail with invalid password",
              "fullTitle": "User API Endpoints should fail with invalid password",
              "timedOut": false,
              "duration": 64,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(baseURL)\n\t.post('/users/login')\n\t.send({ username: testUser.username, password: 'wrongpassword' });\nexpect(res.status).to.equal(401);\nexpect(res.body).to.have.property('error');",
              "err": {},
              "uuid": "2491a6f4-5685-4b85-832a-1ef260ff4905",
              "parentUUID": "93bc5d5b-096e-4870-b10a-085f88263d46",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cf0bf7f1-cb24-4fe2-a278-63ca6f022149",
            "6b4698d2-9913-4fce-a26a-964bb8e123f0",
            "e043b7c2-eba2-43fd-ba7f-898f7e5d1fd7",
            "5a6e166f-8dd8-4bf0-9278-afcae33e64a7",
            "0d110158-4602-4612-ba33-4d135f31f548",
            "261b8a8e-ef46-43eb-ae98-9a6fd6dd5aa4",
            "5bf1d6f4-f8ad-41e7-a106-ae67d3f86d45",
            "a7485457-81ab-42e6-8888-73e99140fce8",
            "21e62c1e-7dec-464f-9553-4879f83e926f",
            "7e683872-3f37-4e2b-9067-8b0166cc947a",
            "94632498-2864-4c56-b7cb-8b4c4e703076",
            "eae6ff53-c09d-48ca-9e80-a90a6c486744",
            "2491a6f4-5685-4b85-832a-1ef260ff4905"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 374,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}